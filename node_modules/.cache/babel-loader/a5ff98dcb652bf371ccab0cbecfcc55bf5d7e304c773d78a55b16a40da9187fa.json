{"ast":null,"code":"import React from\"react\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const CvComponent=()=>{//   const handleDownload = () => {\n//     // Perform any necessary actions before downloading the file\n//     // For example, fetch the file from the server\n//     fetch(\"http://localhost:8009/cv\")\n//       .then((response) => {\n//         // Check if response is successful\n//         if (!response.ok) {\n//           throw new Error(\"Network response was not ok\");\n//         }\n//         // Return blob data\n//         return response.blob();\n//       })\n//       .then((blob) => {\n//         // Create a temporary URL for the blob\n//         const url = window.URL.createObjectURL(new Blob([blob]));\n//         // Create a temporary anchor element\n//         const a = document.createElement(\"a\");\n//         // Set the URL and download attribute for the anchor\n//         a.href = url;\n//         a.download = \"cv.docx\"; // Set the desired filename and extension\n//         // Programmatically click the anchor element to trigger the download\n//         a.click();\n//         // Cleanup: Revoke the temporary URL\n//         window.URL.revokeObjectURL(url);\n//       })\n//       .catch((error) => {\n//         console.error(\"There was a problem with the fetch operation:\", error);\n//       });\n//   };\nconst handleDownload=()=>{// Construct the URL for the document file\nconst fileUrl=process.env.PUBLIC_URL+\"/cv/cv.docx\";// Create an anchor element\nconst anchor=document.createElement(\"a\");anchor.href=fileUrl;anchor.download=\"cv.docx\";// Set the filename for the downloaded file\nanchor.click();};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsx(\"a\",{onClick:handleDownload,children:\"Download Cv\"})});};export default CvComponent;","map":{"version":3,"names":["React","jsx","_jsx","Fragment","_Fragment","CvComponent","handleDownload","fileUrl","process","env","PUBLIC_URL","anchor","document","createElement","href","download","click","children","onClick"],"sources":["/Users/emgr2104/invatat/git/src/header/CvComponent.js"],"sourcesContent":["import React from \"react\";\n\nconst CvComponent = () => {\n  //   const handleDownload = () => {\n  //     // Perform any necessary actions before downloading the file\n  //     // For example, fetch the file from the server\n  //     fetch(\"http://localhost:8009/cv\")\n  //       .then((response) => {\n  //         // Check if response is successful\n  //         if (!response.ok) {\n  //           throw new Error(\"Network response was not ok\");\n  //         }\n  //         // Return blob data\n  //         return response.blob();\n  //       })\n  //       .then((blob) => {\n  //         // Create a temporary URL for the blob\n  //         const url = window.URL.createObjectURL(new Blob([blob]));\n  //         // Create a temporary anchor element\n  //         const a = document.createElement(\"a\");\n  //         // Set the URL and download attribute for the anchor\n  //         a.href = url;\n  //         a.download = \"cv.docx\"; // Set the desired filename and extension\n  //         // Programmatically click the anchor element to trigger the download\n  //         a.click();\n  //         // Cleanup: Revoke the temporary URL\n  //         window.URL.revokeObjectURL(url);\n  //       })\n  //       .catch((error) => {\n  //         console.error(\"There was a problem with the fetch operation:\", error);\n  //       });\n  //   };\n  const handleDownload = () => {\n    // Construct the URL for the document file\n    const fileUrl = process.env.PUBLIC_URL + \"/cv/cv.docx\";\n\n    // Create an anchor element\n    const anchor = document.createElement(\"a\");\n    anchor.href = fileUrl;\n    anchor.download = \"cv.docx\"; // Set the filename for the downloaded file\n    anchor.click();\n  };\n\n  return (\n    <>\n      {/* Add an onClick event handler to trigger the download */}\n      <a onClick={handleDownload}>Download Cv</a>\n    </>\n  );\n};\n\nexport default CvComponent;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,gCAAAC,QAAA,IAAAC,SAAA,yBAE1B,KAAM,CAAAC,WAAW,CAAGA,CAAA,GAAM,CACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAM,CAAAC,cAAc,CAAGA,CAAA,GAAM,CAC3B;AACA,KAAM,CAAAC,OAAO,CAAGC,OAAO,CAACC,GAAG,CAACC,UAAU,CAAG,aAAa,CAEtD;AACA,KAAM,CAAAC,MAAM,CAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC,CAC1CF,MAAM,CAACG,IAAI,CAAGP,OAAO,CACrBI,MAAM,CAACI,QAAQ,CAAG,SAAS,CAAE;AAC7BJ,MAAM,CAACK,KAAK,CAAC,CAAC,CAChB,CAAC,CAED,mBACEd,IAAA,CAAAE,SAAA,EAAAa,QAAA,cAEEf,IAAA,MAAGgB,OAAO,CAAEZ,cAAe,CAAAW,QAAA,CAAC,aAAW,CAAG,CAAC,CAC3C,CAAC,CAEP,CAAC,CAED,cAAe,CAAAZ,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}